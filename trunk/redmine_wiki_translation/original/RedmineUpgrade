h1. Upgrading

{{>toc}}

h2. Step 1 - Check requirements

The first step to upgrading Redmine is to check that you meet the [[RedmineInstall#Requirements|requirements]] for the version you're about to install.

h2. Step 2 - Backup

It is recommended that you backup your database and file uploads.  Most upgrades are safe but it never hurts to have a backup just in case.

h3. Backing up the files

All file uploads are stored to the @files/@ directory.  You can copy the contents of this directory to a another location to easily back it up.

h3. MySQL database

The @mysqldump@ command can be used to backup the contents of your MySQL database to a text file.

h3. SQLite database

SQLite databases are all contained in a single file, so you can back them up by copying the file to another location.

h3. PostgreSQL

The @pg_dump@ command can be used to backup the contents of a PostgreSQL database to a text file.

h2. Step 3 - Perform the upgrade

Now it's time to perform the actual upgrade.  This process if different depending on how you downloaded Redmine.  You only need to perform *one* of the following options.

h3. Option 1 - Downloaded release (tar.gz or zip file)

1. Uncompress the new program archive in a new directory.

2. Copy your database settings-file @config/database.yml@ into the new @config@ directory.

3. Copy your email settings-file @config/email.yml@ into the new @config@ directory.

4. Copy the @RAILS_ROOT/files@ directory content into your new installation.

5. Copy the folders of your installed plugins into new installation directory

VERY IMPORTANT: do NOT overwrite @config/settings.yml@ with the old one.

h3. Option 2 - Upgrading from a SVN [[CheckingoutRedmine|checkout]]

1. Go to the Redmine root directory and run the following command:
<pre>
svn update
</pre>

2. If you are upgrading the trunk version of Redmine to r2493 or above, you must generate a secret for cookie store.  See the note at the bottom about generating a @session_store@.

h2. Step 4 - Update the database

This step is the one that could change the contents of your database. Go to your new redmine directory, then migrate your database:

<pre>
rake db:migrate RAILS_ENV="production"
</pre>

If you have installed any plugins, you should also run their database migrations. If you are upgrading to Rails 2.2.2 as part of this migration, you need to upgrade the plugin migrations first:

<pre>
rake db:migrate:upgrade_plugin_migrations RAILS_ENV="production"
</pre>

<pre>
rake db:migrate_plugins RAILS_ENV="production"
</pre>

h2. Step 5 - Clean up

1. You should clear the cache and the existing sessions:
<pre>
rake tmp:cache:clear
rake tmp:sessions:clear
</pre>

2. Restart the application server (e.g. mongrel, thin, passenger)

3. Finally go to _"Admin -> Roles & permissions"_ to check/set permissions for the new features, if any.

h2. Common issues

h3. Generating a session_store.rb

An unique @session_store.rb@ file needs to be generated for Redmine for the new cookie based sessions to work.  This is required on the trunk version of Redmine at r2493 or above.  Just run the following command and Redmine will create one for you:
<pre>
rake config/initializers/session_store.rb
</pre>


h3. Errors about a missing session_store.rb

If you see any errors about a missing @session_store.rb@ file, run the command above to create a new one.

h3. Error about the Rails version

Also remember that the trunk version of Redmine after r2493 uses Rails 2.2.2, so you will need to upgrade your Ruby on Rails gem:
<pre>
gem install rails -v=2.2.2
</pre>


